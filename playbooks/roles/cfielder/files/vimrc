set nu
syntax on
set mouse-=a
set inccommand=nosplit

" 80 character color difference
let &colorcolumn=join(range(80,999),",")
highlight ColorColumn ctermbg=8
hi ColorColumn ctermbg=Black

" Lines for splitting
set splitbelow
set splitright

" automatically rebalance windows on vim resize
augroup auto_resize
autocmd!
autocmd VimResized * :wincmd =
augroup END

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" shortcuts with map leader
nnoremap <leader>/ :nohls <enter>
nnoremap <leader>w :w <enter>
nnoremap <leader>W :%s/\s\+$//e <enter>
nnoremap <leader>q :bd <enter>
nnoremap <leader>n :set nu! <enter>
nnoremap <leader>l :set list! <enter>
nnoremap <leader>t :NERDTreeToggle <enter>
nnoremap <leader>f :FZF <enter>
nnoremap <leader>r :Rg <enter>
nnoremap <leader>s :set spell!
nnoremap <leader>T :argadd `rg '.*role: (\w*).*' % -r '$1' --trim \\| xargs -i{} fd -tf . roles/{}/tasks` \| tab all <enter>

" macros
let @j = 'a "{{  }}"4h'

" settings for undo files
set undofile
set undodir=~/.vim/undo/
set backupdir=~/.vim/backup/
set directory=~/.vim/swp/

" settings for search
set hlsearch
set incsearch

" settings for tabs
set expandtab
set autoindent
set smarttab

" settings for listchars
set listchars=tab:..,trail:-,extends:>,precedes:<,nbsp:~

" settings for folds
nnoremap <space> za

"
" Plugins
"
if (!isdirectory("$HOME/.vim/autoload") && has('vim')) || (!isdirectory("$HOME/.vim/plugged") && has('nvim'))
    call plug#begin('~/.vim/plugged')
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-markdown'
    Plug 'tpope/vim-dispatch'
    Plug 'tpope/vim-repeat'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'sheerun/vim-polyglot'
    Plug 'w0rp/ale'
    Plug 'enricobacis/paste.vim'
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-jedi'
    Plug 'zchee/deoplete-go', { 'do': 'make'}
    Plug 'junegunn/goyo.vim'
    " Plug 'altercation/vim-colors-solarized'
    Plug 'b4b4r07/vim-ansible-vault'
    " Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
    Plug 'rbong/vim-crystalline'
    Plug 'iCyMind/NeoSolarized'
    call plug#end()

    " colorscheme solarized
    colorscheme NeoSolarized

    " fugitive git bindings
    nnoremap <leader>ga  :Git add %:p<CR><CR>
    nnoremap <leader>gs  :Gstatus<CR>
    nnoremap <leader>gc  :Gcommit -v -q<CR>
    nnoremap <leader>gt  :Gcommit -v -q %:p<CR>
    nnoremap <leader>gd  :Gdiff<CR>
    nnoremap <leader>ge  :Gedit<CR>
    nnoremap <leader>gr  :Gread<CR>
    nnoremap <leader>gw  :Gwrite<CR><CR>
    nnoremap <leader>gl  :silent! Glog<CR>:bot copen<CR>
    nnoremap <leader>gp  :Ggrep<Space>
    nnoremap <leader>gm  :Gmove<Space>
    nnoremap <leader>gb  :Gblame!<CR>
    nnoremap <leader>go  :Git checkout<Space>
    nnoremap <leader>gps :Dispatch! git push<CR>
    nnoremap <leader>gpl :Dispatch! git pull<CR>

    " vim-crystalline settings
    function! StatusLine(current, width)
      return (a:current ? crystalline#mode() . '%#Crystalline#' : '%#CrystallineInactive#')
            \ . ' %f%h%w%m%r '
            \ . (a:current ? '%#CrystallineFill# %{fugitive#head()} ' : '')
            \ . '%=' . (a:current ? '%#Crystalline# %{&paste?"PASTE ":""}%{&spell?"SPELL ":""}' . crystalline#mode_color() : '')
            \ . (a:width > 80 ? ' %{&ft}  %l/%L  %P ' : ' ')
    endfunction

    function! TabLine()
		let l:vimlabel = has("nvim") ? "NVIM" : "VIM"
		return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab#'
	endfunction

    let g:crystalline_statusline_fn = 'StatusLine'
    let g:crystalline_tabline_fn = 'TabLine'
    let g:crystalline_theme = 'solarized'
    set laststatus=2

    " Can't use this just yet because coc-python is iffy
    " coc settings
    " let g:coc_global_extensions = [
    " \   'coc-emoji', 'coc-prettier',
    " \   'coc-json', 'coc-python', 'coc-yaml'
    " \]

    " " Better display for messages
    " " set cmdheight=2
    " " Smaller updatetime for CursorHold & CursorHoldI
    " set updatetime=300
    " " don't give |ins-completion-menu| messages.
    " set shortmess+=c
    " " always show signcolumns
    " set signcolumn=yes

    " " Use `lp` and `ln` for navigate diagnostics
    " nmap <silent> <leader>lp <Plug>(coc-diagnostic-prev)
    " nmap <silent> <leader>ln <Plug>(coc-diagnostic-next)

    " " Remap keys for gotos
    " nmap <silent> <leader>ld <Plug>(coc-definition)
    " nmap <silent> <leader>lt <Plug>(coc-type-definition)
    " nmap <silent> <leader>li <Plug>(coc-implementation)
    " nmap <silent> <leader>lf <Plug>(coc-references)

    " " Remap for rename current word
    " nmap <leader>lr <Plug>(coc-rename)

    " " Use K for show documentation in preview window
    " nnoremap <silent> K :call <SID>show_documentation()<CR>

    " function! s:show_documentation()
    "   if &filetype == 'vim'
    "     execute 'h '.expand('<cword>')
    "   else
    "     call CocAction('doHover')
    "   endif
    " endfunction

    " " Highlight symbol under cursor on CursorHold
    " autocmd CursorHold * silent call CocActionAsync('highlight')

    " dispatch settings
    nnoremap <F3> :Dispatch<CR>
    nnoremap <F4> :Start<CR>

    " ale settings
    let g:ale_fixers = {
    \   '*': ['trim_whitespace'],
    \   'python': ['black', 'yapf'],
    \   'c': ['clang-format'],
    \   'yaml': ['prettier'],
    \   'json': ['prettier'],
    \   'javascript': ['eslint'],
    \   'go': ['gofmt'],
    \   'sh': ['shfmt'],
    \   'terraform': ['terraform'],
    \}
    let g:airline#extensions#ale#enabled = 1
    let g:ale_sign_column_always = 1
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_lint_on_enter = 0
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
    " As of 2.8, Ansible wants boolean variables to be True or False
    let g:ale_yaml_yamllint_options = '-d "{rules: {truthy: disable}}"'
    nmap <F10> <Plug>(ale_fix)

    " Deoplete
    let g:deoplete#enable_at_startup = 1

    " vim-markdown
    let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

    " Goyo
    nnoremap <leader>g :Goyo<CR>
endif

" Set colorscheme and fixes
" set t_Co=256
" set background=dark
" highlight Normal ctermbg=NONE
" highlight nonText ctermbg=NONE

"
" Settings for specific filetypes
"

" settings for editing yml files
augroup ft_yml
    autocmd!
    autocmd BufNewFile,BufRead *.yml setlocal
        \ filetype=yaml
        \ tabstop=2
        \ softtabstop=2
        \ shiftwidth=2
        \ expandtab
        \ autoindent
augroup END

" settings for editing md files
augroup ft_md
    autocmd!
    autocmd BufNewFile,BufRead *.md setlocal
        \ filetype=markdown
        \ textwidth=0
        \ tabstop=2
        \ softtabstop=2
        \ shiftwidth=2
        \ expandtab
        \ autoindent
        \ fileformat=unix
augroup END

" settings for editing python .py files
augroup ft_python
    autocmd!
    autocmd FileType python setlocal
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
        \ textwidth=79
        \ expandtab
        \ autoindent
        \ fileformat=unix
        \ commentstring=#\ %s
        \ foldmethod=indent
augroup END

" settings for editing sh files
augroup ft_sh
    autocmd!
    autocmd FileType sh setlocal
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
        \ expandtab
        \ autoindent
        \ fileformat=unix
augroup END

" settings for editing .c files
augroup ft_c
    autocmd!
    autocmd FileType c setlocal
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
        \ textwidth=79
        \ expandtab
        \ autoindent
        \ fileformat=unix
    autocmd FileType c inoremap { {<CR><BS>}<Esc>ko
    autocmd FileType c inoremap ( ()<Esc>i
    if executable('clang')
        let &makeprg="clang -Wall -o %< %"
    else
        let &makeprg="gcc -Wall -o %< %"
    endif
augroup END

" settings for editing go files
augroup ft_go
    autocmd!
    autocmd FileType go setlocal
        \ commentstring=//\ %s
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
augroup END

" settings for editing Jenkinsfile
augroup ft_jenkins
    autocmd!
    autocmd FileType Jenkinsfile setlocal
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
augroup END

" settings for editing vimrc
augroup ft_vim
    autocmd!
    autocmd Filetype vim setlocal
        \ commentstring=\"\ %s
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
    autocmd! bufwritepost .vimrc source %
augroup END


" dynamic settings per host
try
    source $HOME/.vimrc.local
catch
    " pass
endtry
