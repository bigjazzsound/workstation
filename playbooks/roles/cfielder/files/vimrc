set nu
syntax on
set mouse-=a
set guifont=Monaco\ for\ Powerline\ Regular\ 12
set inccommand=nosplit

" 80 character color difference
let &colorcolumn=join(range(80,999),",")
highlight ColorColumn ctermbg=8
hi ColorColumn ctermbg=Black

" Lines for splitting
set splitbelow
set splitright

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" shortcuts with map leader
nnoremap <leader>/ :nohls <enter>
nnoremap <leader>w :w <enter>
nnoremap <leader>W :%s/\s\+$//e <enter>
nnoremap <leader>q :bd <enter>
nnoremap <leader>n :set nonu <enter>
nnoremap <leader>N :set nu <enter>
nnoremap <leader>l :set list <enter>
nnoremap <leader>L :set nolist <enter>
nnoremap <leader>t :NERDTreeToggle <enter>

" macros
let @j = 'i"{{}}"'

" settings for undo files
set undofile
set undodir=~/.vim/.undo/
set backupdir=~/.vim/.backup/
set directory=~/.vim/.swp/

" settings for search
set hlsearch
set incsearch

" settings for tabs
set expandtab
set autoindent
set smarttab

" settings for listchars
set listchars=tab:..,trail:-,extends:>,precedes:<,nbsp:~

" settings for folds
nnoremap <space> za

"
" Plugins
"
if (!isdirectory("$HOME/.vim/autoload") && has('vim')) || (!isdirectory("$HOME/.vim/plugged") && has('nvim'))
    call plug#begin('~/.vim/plugged')
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'arcticicestudio/nord-vim'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-markdown'
    Plug 'tpope/vim-dispatch'
    Plug 'tpope/vim-repeat'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'godlygeek/tabular'
    Plug 'sheerun/vim-polyglot'
    Plug 'w0rp/ale'
    Plug 'enricobacis/paste.vim'
    Plug 'google/yapf'
    Plug 'dracula/vim',{'as':'dracula'}
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    Plug 'zchee/deoplete-jedi'
    Plug 'zchee/deoplete-go', { 'do': 'make'}
    Plug 'sealeg/vim-kickstart'
    Plug 'junegunn/goyo.vim'
    Plug 'altercation/vim-colors-solarized'
    call plug#end()

    colorscheme solarized
    
    " fugitive git bindings
    nnoremap <leader>ga :Git add %:p<CR><CR>
    nnoremap <leader>gs :Gstatus<CR>
    nnoremap <leader>gc :Gcommit -v -q<CR>
    nnoremap <leader>gt :Gcommit -v -q %:p<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>ge :Gedit<CR>
    nnoremap <leader>gr :Gread<CR>
    nnoremap <leader>gw :Gwrite<CR><CR>
    nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
    nnoremap <leader>gp :Ggrep<Space>
    nnoremap <leader>gm :Gmove<Space>
    nnoremap <leader>gb :Git branch<Space>
    nnoremap <leader>go :Git checkout<Space>
    nnoremap <leader>gps :Dispatch! git push<CR>
    nnoremap <leader>gpl :Dispatch! git pull<CR>

    " airline settings
    set laststatus=2
    let g:airline_theme='solarized'

    " dispatch settings
    nnoremap <F3> :Dispatch<CR>
    nnoremap <F4> :Start<CR>

    " ale settings
    let g:ale_fixers = {
    \   'python': ['black', 'yapf'],
    \   'c': ['clang-format'],
    \   'yaml': ['prettier'],
    \   'json': ['prettier'],
    \   'javascript': ['eslint'],
    \   'go': ['gofmt'],
    \}
    let g:airline#extensions#ale#enabled = 1
    let g:ale_sign_column_always = 1
    let g:ale_lint_on_text_changed = 'never'
    let g:ale_lint_on_enter = 0
    nmap <F10> <Plug>(ale_fix)

    " Deoplete
    let g:deoplete#enable_at_startup = 1

    " vim-markdown
    let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
    
    " NERDTree
    let NERDTreeMinimalUI = 1
endif

" Set colorscheme and fixes
set t_Co=256
set background=dark
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

"
" Settings for specific filetypes
"

" settings for editing Salt .sls files with yaml syntax hilighting
autocmd BufNewFile,BufRead *.sls set filetype=yaml tabstop=2 softtabstop=2

" settings for editing yml files
autocmd BufNewFile,BufRead *.yml set filetype=yaml tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent

" settings for editing md files
autocmd BufNewFile,BufRead *.md set filetype=markdown textwidth=0

" settings for editing python .py files
autocmd FileType python setlocal
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=79
    \ expandtab
    \ autoindent
    \ fileformat=unix
    \ commentstring=#\ %s
    \ foldmethod=indent

" settings for editing .c files
autocmd FileType c setlocal
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=79
    \ expandtab
    \ autoindent
    \ fileformat=unix
    if executable('clang')
        let &makeprg="clang -Wall -o %< %"
    else
        let &makeprg="gcc -Wall -o %< %"
    endif
autocmd FileType c inoremap { {<CR><BS>}<Esc>ko
autocmd FileType c inoremap ( ()<Esc>i

" settings for editing go files
autocmd FileType go setlocal 
    \ commentstring=//\ %s
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4

" settings for editing vimrc
autocmd Filetype vim setlocal 
    \ commentstring=\"\ %s
    \ tabstop=4
    \ softtabstop=4
    \ shiftwidth=4
autocmd! bufwritepost .vimrc source %

" dynamic settings per host
try
    source $HOME/.vimrc.local
catch
    " pass
endtry
