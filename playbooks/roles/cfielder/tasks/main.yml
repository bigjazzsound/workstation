---
- name: I am root
  block:
    - name: Install docker-machine bash completion scripts
      get_url:
        url: "https://raw.githubusercontent.com/docker/machine/master/contrib/completion/bash/docker-machine.bash"
        dest: "/etc/bash_completion.d/docker-machine.bash"
        mode: 0444

    - name: Add groups
      group:
        name: "{{ item }}"
        state: present
      loop:
        - cfielder
        - "{{ libvirt_group }}"
        - docker

    - name: Create /home/images
      file:
        path: /home/images
        mode: 0770
        owner: root
        group: "{{ libvirt_group }}"
        state: directory

    - name: Add cfielder
      user:
        name: cfielder
        comment: Craig James Fielder
        shell: /bin/bash
        group: cfielder
        groups:
          - "{{ libvirt_group }}"
          - docker
        append: True
        uid: 1000
  become: True
  tags:
    - nox

- name: Make dirs
  file:
    path: "{{ ansible_user_dir + '/' + item }}"
    owner: cfielder
    group: cfielder
    state: directory
  loop: "{{ dirs }}"
  tags:
    - nox
    - dotfiles

- name: Make dirs
  file:
    path: "/home/cfielder/{{ item.path }}"
    owner: cfielder
    group: cfielder
    state: directory
  loop: "{{ q('filetree', role_path + '/files') }}"
  when: item.state == 'directory'
  tags:
    - nox
    - dotfiles

- name: Install dotfiles
  file:
    src: "{{ item.src }}"
    path: "~/{{ item.path }}"
    state: link
    force: True
  loop: "{{ q('filetree', role_path + '/files') }}"
  when: item.state == 'file'
  tags:
    - nox
    - dotfiles

- name: Install vim-plug
  get_url:
    url: "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    dest: "{{ ansible_user_dir }}/.local/share/nvim/site/autoload/plug.vim"
  tags:
    - nox
    - vim-plug

- name: Make nvim config symlink
  file:
    src: "{{ role_path }}/files/vimrc"
    dest: /home/cfielder/.config/nvim/init.vim
    owner: cfielder
    group: cfielder
    state: link
    force: True
  tags:
    - nox

- name: Config git
  git_config:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ q('dict', git_aliases) }}"
  tags:
    - git
    - nox

# - name: Install pip2 packages
#   pip:
#     name:
#       - neovim
#       - yapf
#       - dopy
#     extra_args: "--user -U"
#     state: present
#   become: True
#   become_user: cfielder
#   changed_when: False
#   tags:
#     - nox
#     - python_pkgs
#     - python2

# - name: Install pip3 packages
#   pip:
#     name:
#       - neovim
#       - yapf
#       - awscli
#       - youtube-dl
#     executable: pip3
#     extra_args: "--user -U"
#     state: present
#   become: True
#   become_user: cfielder
#   changed_when: False
#   tags:
#     - nox
#     - python_pkgs
#     - python3

- name: Install flatpaks
  flatpak:
    name: "{{ item }}"
    state: present
    method: user
  loop: "{{ flatpaks }}"
  tags:
    - flatpak
    - flatpaks

- name: Test for rust
  stat:
    path: "{{ ansible_user_dir }}/.cargo/bin/rustup"
  register: rust_present
  tags:
    - rust
    - nox

- name: Update rust and crates
  block:
    - name: Update rust
      shell: rustup update
      register: result
      changed_when: "result.stdout is search('installing component')"
      tags:
        - rust
        - nox

    - name: Update crates
      shell: cargo install-update -a 2> /dev/null
      register: result
      changed_when: "not result.stdout is search('No packages need updating')"
      tags:
        - rust
        - nox

  when: rust_present.stat.exists == true

- name: Install rust and cargo packages if rust is not installed
  block:
    - name: Install rustup
      shell: "curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path -y"
      register: result
      changed_when: "result.stdout is search('downloading installer')"
      args:
        warn: False

    - name: Install rust packages
      command: "cargo install -q -j {{ ansible_processor_cores }} {{ rust_pkgs | join(' ') }}"
      register: result
      changed_when: "not result.rc == 101"
      failed_when: "not result.rc == 101"

  when: rust_present.stat.exists == false
  tags:
    - rust
    - nox

- name: Cron jobs
  block:
    - cron:
        name: Update git repos
        minute: "*/10"
        job: |
          for i in $($HOME/.cargo/bin/fd -t d -H '^\.git$' ~/playground/); do git -C $i fetch -q; done > /dev/null 2>&1
        user: cfielder
  tags:
    - cron
    - nox
